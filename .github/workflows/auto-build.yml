name: BBDown Auto Build & Release

on:
  schedule:
    - cron: '0 2 * * *'  # Check for updates daily at 2:00 AM UTC
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write
  actions: read

env:
  UPSTREAM_REPO: 'nilaoda/BBDown'
  DOTNET_SDK_VERSION: '9.0.*'
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  check-upstream:
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check.outputs.has_updates }}
      latest-commit: ${{ steps.check.outputs.latest_commit }}
      commit-message: ${{ steps.check.outputs.commit_message }}
      build-version: ${{ steps.version.outputs.version }}
      build-time: ${{ steps.version.outputs.build_time }}
    
    steps:
      - name: Check upstream for updates
        id: check
        run: |
          echo "=== Checking upstream repository for updates ==="
          # Use authenticated request to avoid rate limits
          UPSTREAM_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ env.UPSTREAM_REPO }}/commits/master")
          if [ $? -ne 0 ] || [ "$UPSTREAM_RESPONSE" = "" ]; then
            echo "❌ Failed to fetch upstream commit information"
            exit 1
          fi
      
          LATEST_COMMIT=$(echo "$UPSTREAM_RESPONSE" | jq -r '.sha')
          if [ "$LATEST_COMMIT" = "null" ] || [ "$LATEST_COMMIT" = "" ]; then
            echo "❌ Failed to parse upstream commit SHA"
            echo "Response was: $UPSTREAM_RESPONSE"
            exit 1
          fi
          
          echo "✅ Latest upstream commit: $LATEST_COMMIT"
          echo "📝 Commit message: $COMMIT_MESSAGE"
          echo "📅 Commit date: $COMMIT_DATE"
          
          echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          
          # Check if commit is too old (don't auto-build commits older than 30 days)
          COMMIT_TIMESTAMP=$(date -d "$COMMIT_DATE" +%s)
          CURRENT_TIMESTAMP=$(date +%s)
          DAYS_OLD=$(( (CURRENT_TIMESTAMP - COMMIT_TIMESTAMP) / 86400 ))
          
          echo "📊 Commit is $DAYS_OLD days old"
          
          if [ $DAYS_OLD -gt 30 ]; then
            echo "⏭️  Commit is older than 30 days, skipping automatic build"
            echo "💡 If you want to build this version, please manually create a release"
            echo "has_updates=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if this version has already been built
          echo "Checking existing releases for this commit..."
          SHORT_COMMIT=$(echo "$LATEST_COMMIT" | cut -c1-7)
          
          RELEASES_RESPONSE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases")
          RELEASE_EXISTS=$(echo "$RELEASES_RESPONSE" | jq -r --arg commit "$SHORT_COMMIT" '.[] | select(.tag_name | contains($commit)) | .tag_name' | head -1)
          
          echo "🔍 Looking for releases containing commit: $SHORT_COMMIT"
          
          if [ -z "$RELEASE_EXISTS" ] || [ "$RELEASE_EXISTS" = "null" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "✅ New version found, will build: $LATEST_COMMIT"
            echo "📝 Commit message: $COMMIT_MESSAGE"
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "⏭️  Version $LATEST_COMMIT already built (release: $RELEASE_EXISTS), skipping"
          fi
          
          echo "=== Check completed ==="

      - name: Generate build version
        id: version
        if: steps.check.outputs.has_updates == 'true'
        run: |
          SHORT_COMMIT=$(echo "${{ steps.check.outputs.latest_commit }}" | cut -c1-7)
          BUILD_DATE=$(date -u +'%Y%m%d')
          BUILD_TIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
          VERSION="v${BUILD_DATE}-${SHORT_COMMIT}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"
          echo "Build time: $BUILD_TIME"

  build-windows:
    needs: check-upstream
    if: needs.check-upstream.outputs.has-updates == 'true'
    runs-on: windows-latest
    
    steps:
      - name: Clone upstream repository
        run: |
          git clone https://github.com/${{ env.UPSTREAM_REPO }}.git .
          git checkout ${{ needs.check-upstream.outputs.latest-commit }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - name: Install zip
        run: choco install zip --no-progress --yes

      - name: Build Windows x64
        run: dotnet publish BBDown -r win-x64 -c Release -o ./build/win-x64

      - name: Build Windows ARM64
        run: dotnet publish BBDown -r win-arm64 -c Release -o ./build/win-arm64

      - name: Package Windows builds
        run: |
          cd ./build/win-x64
          zip ../../BBDown-${{ needs.check-upstream.outputs.build-version }}-win-x64.zip BBDown.exe
          cd ../win-arm64
          zip ../../BBDown-${{ needs.check-upstream.outputs.build-version }}-win-arm64.zip BBDown.exe

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            BBDown-${{ needs.check-upstream.outputs.build-version }}-win-x64.zip
            BBDown-${{ needs.check-upstream.outputs.build-version }}-win-arm64.zip

  build-linux:
    needs: check-upstream
    if: needs.check-upstream.outputs.has-updates == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Clone upstream repository
        run: |
          git clone https://github.com/${{ env.UPSTREAM_REPO }}.git .
          git checkout ${{ needs.check-upstream.outputs.latest-commit }}

      - name: Setup cross-compilation for ARM64
        run: |
          if [[ $ImageOS == "ubuntu24" ]]; then
            cat <<EOF > deb822sources
          Types: deb
          URIs: http://archive.ubuntu.com/ubuntu/
          Suites: noble
          Components: main restricted universe
          Architectures: amd64

          Types: deb
          URIs: http://security.ubuntu.com/ubuntu/
          Suites: noble-security
          Components: main restricted universe
          Architectures: amd64

          Types: deb
          URIs: http://archive.ubuntu.com/ubuntu/
          Suites: noble-updates
          Components: main restricted universe
          Architectures: amd64

          Types: deb
          URIs: http://azure.ports.ubuntu.com/ubuntu-ports/
          Suites: noble
          Components: main restricted multiverse universe
          Architectures: arm64

          Types: deb
          URIs: http://azure.ports.ubuntu.com/ubuntu-ports/
          Suites: noble-updates
          Components: main restricted multiverse universe
          Architectures: arm64
          EOF

            sudo mv deb822sources /etc/apt/sources.list.d/ubuntu.sources
          else
            sudo mv config/crosscomp-sources.list /etc/apt/sources.list
          fi

      # https://learn.microsoft.com/zh-cn/dotnet/core/deploying/native-aot/cross-compile
      - run: |
          sudo dpkg --add-architecture arm64
          sudo bash -c 'cat > /etc/apt/sources.list.d/arm64.list <<EOF
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-backports main restricted universe multiverse
          EOF'
          sudo sed -i -e 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
          sudo sed -i -e 's/deb mirror/deb [arch=amd64] mirror/g' /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get install -y curl wget libicu-dev libcurl4-openssl-dev zlib1g-dev libkrb5-dev clang llvm binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu zlib1g-dev:arm64

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - name: Build Linux x64
        run: dotnet publish BBDown -r linux-x64 -c Release -o ./build/linux-x64

      - name: Build Linux ARM64
        run: |
          # Set up environment for cross-compilation
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
          export AR=aarch64-linux-gnu-ar
          export STRIP=aarch64-linux-gnu-strip
          export OBJCOPY=aarch64-linux-gnu-objcopy
          
          dotnet publish BBDown -r linux-arm64 -c Release -o ./build/linux-arm64

      - name: Package Linux builds
        run: |
          cd ./build/linux-x64
          zip ../../BBDown-${{ needs.check-upstream.outputs.build-version }}-linux-x64.zip BBDown
          cd ../linux-arm64
          zip ../../BBDown-${{ needs.check-upstream.outputs.build-version }}-linux-arm64.zip BBDown

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: |
            BBDown-${{ needs.check-upstream.outputs.build-version }}-linux-x64.zip
            BBDown-${{ needs.check-upstream.outputs.build-version }}-linux-arm64.zip

  build-macos:
    needs: check-upstream
    if: needs.check-upstream.outputs.has-updates == 'true'
    runs-on: macos-latest
    
    steps:
      - name: Clone upstream repository
        run: |
          git clone https://github.com/${{ env.UPSTREAM_REPO }}.git .
          git checkout ${{ needs.check-upstream.outputs.latest-commit }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - name: Build macOS x64
        run: dotnet publish BBDown -r osx-x64 -c Release -o ./build/osx-x64

      - name: Build macOS ARM64
        run: dotnet publish BBDown -r osx-arm64 -c Release -o ./build/osx-arm64

      - name: Package macOS builds
        run: |
          cd ./build/osx-x64
          zip ../../BBDown-${{ needs.check-upstream.outputs.build-version }}-osx-x64.zip BBDown
          cd ../osx-arm64
          zip ../../BBDown-${{ needs.check-upstream.outputs.build-version }}-osx-arm64.zip BBDown

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: |
            BBDown-${{ needs.check-upstream.outputs.build-version }}-osx-x64.zip
            BBDown-${{ needs.check-upstream.outputs.build-version }}-osx-arm64.zip

  create-release:
    needs: [check-upstream, build-windows, build-linux, build-macos]
    if: needs.check-upstream.outputs.has-updates == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Organize release files
        run: |
          mkdir -p ./release-files
          find ./artifacts -name "*.zip" -exec cp {} ./release-files/ \;
          ls -la ./release-files/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-upstream.outputs.build-version }}
          name: "BBDown ${{ needs.check-upstream.outputs.build-version }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            🤖 **Automated Build Release**
            
            Automatically built from the latest [nilaoda/BBDown](https://github.com/${{ env.UPSTREAM_REPO }}) source code.
            
            **Version Information:**
            - 🆔 Upstream Commit: `${{ needs.check-upstream.outputs.latest-commit }}`
            - 📝 Commit Message: ${{ needs.check-upstream.outputs.commit-message }}
            - 🕐 Build Time: ${{ needs.check-upstream.outputs.build-time }}
            
            **Supported Platforms:**
            - ✅ Windows x64/ARM64
            - ✅ Linux x64/ARM64  
            - ✅ macOS x64/ARM64
            
            **Usage Instructions:**
            1. Download the appropriate package for your platform
            2. Extract the archive
            3. Run the BBDown executable directly
            4. For detailed usage, see [original project documentation](https://github.com/${{ env.UPSTREAM_REPO }})
            
            ---
            > This version is automatically built by GitHub Actions and kept in sync with the upstream project
          files: ./release-files/*
          draft: false
          prerelease: false

  # No updates notification
  no-updates:
    needs: check-upstream
    if: needs.check-upstream.outputs.has-updates == 'false'
    runs-on: ubuntu-latest
    
    steps:
      - name: No updates notification
        run: |
          echo "✅ Check completed: No new updates in upstream"
          echo "Latest version is already the newest built version"
          
          echo "## ✅ Check Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No new updates found in upstream repository, no rebuild needed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Upstream Repository**: [${{ env.UPSTREAM_REPO }}](https://github.com/${{ env.UPSTREAM_REPO }})" >> $GITHUB_STEP_SUMMARY
          echo "**Check Time**: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY

  # Build failure handling
  build-failed:
    needs: [check-upstream, build-windows, build-linux, build-macos, create-release]
    if: failure() && needs.check-upstream.outputs.has-updates == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Build failure notification
        run: |
          echo "❌ Build failed"
          echo "Workflow link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "Upstream commit: ${{ needs.check-upstream.outputs.latest-commit }}"
          
          echo "## ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Failure Time**: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "**Upstream Commit**: ${{ needs.check-upstream.outputs.latest-commit }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow**: [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Possible Causes" >> $GITHUB_STEP_SUMMARY
          echo "- Upstream code compilation errors" >> $GITHUB_STEP_SUMMARY
          echo "- Build environment dependency issues" >> $GITHUB_STEP_SUMMARY
          echo "- .NET SDK version incompatibility" >> $GITHUB_STEP_SUMMARY
